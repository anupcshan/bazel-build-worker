// Code generated by protoc-gen-go.
// source: src/main/protobuf/remote_protocol.proto
// DO NOT EDIT!

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	src/main/protobuf/remote_protocol.proto

It has these top-level messages:
	CacheEntry
	FileEntry
	RemoteWorkRequest
	RemoteWorkResponse
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// A message for cache entry.
type CacheEntry struct {
	// A list of files stored in this cache entry.
	Files []*FileEntry `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	// A blob for data that is a chunk of a file.
	FileContent []byte `protobuf:"bytes,2,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
}

func (m *CacheEntry) Reset()                    { *m = CacheEntry{} }
func (m *CacheEntry) String() string            { return proto.CompactTextString(m) }
func (*CacheEntry) ProtoMessage()               {}
func (*CacheEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CacheEntry) GetFiles() []*FileEntry {
	if m != nil {
		return m.Files
	}
	return nil
}

// A message for storing a file in cache.
type FileEntry struct {
	// The path in the file system where to read this input artifact from. This is
	// either a path relative to the execution root (the worker process is
	// launched with the working directory set to the execution root), or an
	// absolute path.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// The cache key to locate the file content. This key is usually generated
	// from
	// the content of the file such that different keys means the file content are
	// different.
	ContentKey string `protobuf:"bytes,2,opt,name=content_key,json=contentKey" json:"content_key,omitempty"`
	// Whether the file is an executable.
	Executable bool `protobuf:"varint,3,opt,name=executable" json:"executable,omitempty"`
}

func (m *FileEntry) Reset()                    { *m = FileEntry{} }
func (m *FileEntry) String() string            { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()               {}
func (*FileEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// A message for running a command remotely.
type RemoteWorkRequest struct {
	// The key for writing the output of this work request.
	OutputKey string `protobuf:"bytes,1,opt,name=output_key,json=outputKey" json:"output_key,omitempty"`
	// The arguments for running the command. The command itself is in
	// arguments[0].
	Arguments []string `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// The list of input files to this work request.
	InputFiles []*FileEntry `protobuf:"bytes,3,rep,name=input_files,json=inputFiles" json:"input_files,omitempty"`
	// A map of environment variables for this command.
	Environment map[string]string `protobuf:"bytes,4,rep,name=environment" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The list of expected output files to this work request.
	// The content keys for these entries will be empty since the files don't
	// exist yet.
	OutputFiles []*FileEntry `protobuf:"bytes,5,rep,name=output_files,json=outputFiles" json:"output_files,omitempty"`
	// Timeout for running this command.
	Timeout int32 `protobuf:"varint,6,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RemoteWorkRequest) Reset()                    { *m = RemoteWorkRequest{} }
func (m *RemoteWorkRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteWorkRequest) ProtoMessage()               {}
func (*RemoteWorkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoteWorkRequest) GetInputFiles() []*FileEntry {
	if m != nil {
		return m.InputFiles
	}
	return nil
}

func (m *RemoteWorkRequest) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *RemoteWorkRequest) GetOutputFiles() []*FileEntry {
	if m != nil {
		return m.OutputFiles
	}
	return nil
}

// A message for a work response.
type RemoteWorkResponse struct {
	// True if the work was successful.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// String from stdout of running the work.
	Out string `protobuf:"bytes,2,opt,name=out" json:"out,omitempty"`
	// String from stderr of running the work.
	Err string `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	// String for the exception when running this work.
	Exception string `protobuf:"bytes,4,opt,name=exception" json:"exception,omitempty"`
}

func (m *RemoteWorkResponse) Reset()                    { *m = RemoteWorkResponse{} }
func (m *RemoteWorkResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoteWorkResponse) ProtoMessage()               {}
func (*RemoteWorkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*CacheEntry)(nil), "build.remote.CacheEntry")
	proto.RegisterType((*FileEntry)(nil), "build.remote.FileEntry")
	proto.RegisterType((*RemoteWorkRequest)(nil), "build.remote.RemoteWorkRequest")
	proto.RegisterType((*RemoteWorkResponse)(nil), "build.remote.RemoteWorkResponse")
}

var fileDescriptor0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0xe2, 0xa6, 0xd4, 0xe3, 0x1c, 0xca, 0x0a, 0x09, 0x0b, 0xf1, 0x51, 0x2c, 0x04, 0xb9,
	0xe0, 0x20, 0xb8, 0x54, 0x3d, 0x70, 0xa0, 0x6a, 0x2f, 0xdc, 0xf6, 0xc2, 0x8d, 0x60, 0x6f, 0xa7,
	0xe9, 0xaa, 0xeb, 0x5d, 0xb3, 0x1f, 0x51, 0xf3, 0xbf, 0xf9, 0x01, 0xec, 0x87, 0x9b, 0x1a, 0x2a,
	0xe5, 0x36, 0xf3, 0x66, 0xe6, 0xcd, 0xdb, 0x37, 0x0b, 0x1f, 0x8c, 0x66, 0xcb, 0xae, 0xe1, 0x72,
	0xd9, 0x6b, 0x65, 0x55, 0xeb, 0xae, 0x97, 0x1a, 0x3b, 0x65, 0x71, 0x15, 0x73, 0xa6, 0x44, 0x1d,
	0x03, 0x32, 0x6f, 0x1d, 0x17, 0x57, 0x75, 0x2a, 0x56, 0x3f, 0x01, 0xce, 0x1b, 0x76, 0x83, 0x17,
	0xd2, 0xea, 0x2d, 0xf9, 0x08, 0xb3, 0x6b, 0x2e, 0xd0, 0x94, 0x93, 0x93, 0x6c, 0x51, 0x7c, 0x7e,
	0x5e, 0x8f, 0x7b, 0xeb, 0x4b, 0x5f, 0x8a, 0x7d, 0x34, 0x75, 0x91, 0xb7, 0x30, 0x0f, 0xc1, 0x8a,
	0x29, 0x69, 0x51, 0xda, 0x72, 0x7a, 0x32, 0x59, 0xcc, 0x69, 0x11, 0xb0, 0xf3, 0x04, 0x55, 0xbf,
	0x20, 0xdf, 0x8d, 0x11, 0x02, 0x07, 0x7d, 0x63, 0x6f, 0x3c, 0xfb, 0x64, 0x91, 0xd3, 0x18, 0x93,
	0x37, 0x50, 0x0c, 0xe3, 0xab, 0x5b, 0xdc, 0x46, 0x8a, 0x9c, 0xc2, 0x00, 0x7d, 0xc7, 0x2d, 0x79,
	0x0d, 0x80, 0x77, 0xc8, 0x9c, 0x6d, 0x5a, 0x81, 0x65, 0xe6, 0xeb, 0x47, 0x74, 0x84, 0x54, 0x7f,
	0xa6, 0xf0, 0x94, 0x46, 0x81, 0x3f, 0x94, 0xbe, 0xa5, 0xf8, 0xdb, 0xa1, 0xb1, 0xe4, 0x15, 0x80,
	0x72, 0xb6, 0x77, 0x89, 0x35, 0x2d, 0xcc, 0x13, 0x12, 0x48, 0x5f, 0x42, 0xde, 0xe8, 0xb5, 0xeb,
	0xfc, 0x0e, 0xe3, 0x77, 0x66, 0xa1, 0xba, 0x03, 0xc8, 0x29, 0x14, 0x5c, 0x86, 0xd9, 0x64, 0x46,
	0xb6, 0xdf, 0x0c, 0x88, 0xbd, 0x97, 0xd1, 0x11, 0x0a, 0x05, 0xca, 0x0d, 0xd7, 0x4a, 0x06, 0xa6,
	0xf2, 0x20, 0x4e, 0x7e, 0xfa, 0x77, 0xf2, 0x91, 0xd8, 0xfa, 0xe2, 0x61, 0x24, 0x51, 0x8e, 0x49,
	0xc8, 0x19, 0xcc, 0x87, 0xa7, 0x24, 0x39, 0xb3, 0xfd, 0x72, 0x8a, 0xd4, 0x9c, 0xf4, 0x94, 0xf0,
	0xc4, 0xf2, 0x0e, 0x3d, 0x54, 0x1e, 0x7a, 0x0f, 0x66, 0xf4, 0x3e, 0x7d, 0xf1, 0x15, 0x8e, 0xff,
	0x5f, 0x4b, 0x8e, 0x21, 0x7b, 0x70, 0x2b, 0x84, 0xe4, 0x19, 0xcc, 0x36, 0x8d, 0x70, 0x38, 0xdc,
	0x25, 0x25, 0x67, 0xd3, 0xd3, 0x49, 0xd5, 0x03, 0x19, 0x3f, 0xc4, 0xf4, 0x4a, 0x1a, 0x0c, 0xfb,
	0x8c, 0x63, 0x0c, 0x8d, 0x89, 0x2c, 0x47, 0xf4, 0x3e, 0x0d, 0xdc, 0x41, 0x45, 0xe2, 0x09, 0x61,
	0x40, 0x50, 0xeb, 0x78, 0x51, 0x8f, 0xf8, 0x30, 0x5c, 0x05, 0xef, 0x18, 0xf6, 0x96, 0x2b, 0xe9,
	0xbd, 0x8b, 0x37, 0xdb, 0x01, 0xdf, 0xde, 0xc3, 0x3b, 0xa6, 0xba, 0x7a, 0xad, 0xd4, 0x5a, 0x60,
	0x7d, 0x85, 0x1b, 0xab, 0x94, 0x30, 0x83, 0x0d, 0x82, 0xb7, 0x83, 0x15, 0xed, 0x61, 0xfc, 0xe7,
	0x5f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x83, 0x30, 0x2e, 0x0a, 0x12, 0x03, 0x00, 0x00,
}
